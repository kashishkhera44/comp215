{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO4X0ftIaEAhrpQBI7Sb6PG",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kashishkhera44/comp215/blob/main/Project%20COMP%20215\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "id": "xySPgOU3AUTZ",
        "outputId": "211d4efb-db64-4a1f-f292-bb3f42c27d4f"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-b53fe164142b>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;31m# Mount Google Drive\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mdrive\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/__init__.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m    140\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mpandas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mutil\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_print_versions\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mshow_versions\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    141\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 142\u001b[0;31m from pandas.io.api import (\n\u001b[0m\u001b[1;32m    143\u001b[0m     \u001b[0;31m# excel\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    144\u001b[0m     \u001b[0mExcelFile\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/api.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     24\u001b[0m     \u001b[0mto_pickle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m )\n\u001b[0;32m---> 26\u001b[0;31m from pandas.io.pytables import (\n\u001b[0m\u001b[1;32m     27\u001b[0m     \u001b[0mHDFStore\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     28\u001b[0m     \u001b[0mread_hdf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.11/importlib/_bootstrap.py\u001b[0m in \u001b[0;36m_find_and_load\u001b[0;34m(name, import_)\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.11/importlib/_bootstrap.py\u001b[0m in \u001b[0;36m_find_and_load_unlocked\u001b[0;34m(name, import_)\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.11/importlib/_bootstrap.py\u001b[0m in \u001b[0;36m_load_unlocked\u001b[0;34m(spec)\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.11/importlib/_bootstrap_external.py\u001b[0m in \u001b[0;36mexec_module\u001b[0;34m(self, module)\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.11/importlib/_bootstrap_external.py\u001b[0m in \u001b[0;36mget_code\u001b[0;34m(self, fullname)\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.11/importlib/_bootstrap_external.py\u001b[0m in \u001b[0;36m_compile_bytecode\u001b[0;34m(data, name, bytecode_path, source_path)\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Mount Google Drive\n",
        "drive.mount('/content/drive')\n",
        "\n",
        "# Define file path (adjust the path based on your folder structure)\n",
        "file_path = \"https://docs.google.com/spreadsheets/d/15bSCj8ELwkoLwBAPpSPeSpMJNZUE41gY/edit?usp=drive_link&ouid=100385603927402939306&rtpof=true&sd=true\"\n",
        "\n",
        "# Load the Excel file\n",
        "df = pd.read_excel(file_path)\n",
        "\n",
        "# Display the first few rows\n",
        "print(df.head())"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# this is a tool to examine different models for propagating mil rates\n",
        "# from one tax year to the next based on the revised roll information (from BC Assessment)\n",
        "import pandas as pd\n",
        "\n",
        "\n",
        "class PropertyTaxRoll:\n",
        "    \"\"\" A property tax roll class used to model propagation of mil rates.\n",
        "        Data is stored in a pandas Series objects, indexed by property class.\n",
        "        Property classes include:   - Residential\n",
        "                                    - Utilities\n",
        "                                    - Port\n",
        "                                    - Port Improvements\n",
        "                                    - Light Industry\n",
        "                                    - Business/Other\n",
        "                                    - Managed Forest\n",
        "                                    - Recreation\n",
        "                                    - Farm\n",
        "    \"\"\"\n",
        "\n",
        "    # def __init__(self, filename):\n",
        "    #     \"\"\" Initialise from an excel file (DOCUMENT REQUIRED FORMAT!). \"\"\"\n",
        "    #\n",
        "    #     # read the datafile\n",
        "    #     self.filename = filename\n",
        "    #     self.df = pd.read_excel(self.filename, index_col=0, header=1)\n",
        "    #\n",
        "    #     # extract the Series (indexed by property class)\n",
        "    #     self.is_rate_variable = self.df['Variable Rate']\n",
        "    #     self.current_value = self.df['Current Net Taxable Value']\n",
        "    #     self.current_nmc_value = self.df['Current NMC Value']\n",
        "    #     self.prior_value = self.df['Prior Net Taxable Value']\n",
        "    #     self.prior_mil_rate = self.df['Prior Mil Rate']\n",
        "\n",
        "    def __init__(self, filename, year):\n",
        "        \"\"\" initialize from the NMC summary data file \"\"\"\n",
        "        print(f'reading {year} data')\n",
        "        self.year = year\n",
        "        self.sheet = str(year)\n",
        "\n",
        "        # read the sheet (ie year)\n",
        "        self.filename = filename\n",
        "        self.df = pd.read_excel(filename, sheet_name=self.sheet, index_col=0, header=0)\n",
        "\n",
        "        # extract the Series\n",
        "        self.current_value = self.df['Current Net Taxable Value']\n",
        "        self.current_nmc_value = self.df['Current NMC Value']\n",
        "        self.prior_value = self.df['Prior Net Taxable Value']\n",
        "        self.prior_mil_rate = self.df['Prior Mil Rate']\n",
        "\n",
        "        # create the is_rate_variable Series (a hack...)\n",
        "        self.is_rate_variable = pd.Series( {'Residential': True,\n",
        "                                            'Utilities': False,\n",
        "                                            'Port': False,\n",
        "                                            'Port Improvements': False,\n",
        "                                            'Light Industry': True,\n",
        "                                            'Business': True,\n",
        "                                            'Forest': True,\n",
        "                                            'Recreation': True,\n",
        "                                            'Farm': True\n",
        "                                            })\n",
        "\n",
        "\n",
        "    def __str__(self):\n",
        "        return       f'''year: {self.year}\\n\n",
        "                     current value: \\n{self.current_value}\\n\n",
        "                     current NMC value: \\n{self.current_nmc_value}\\n\n",
        "                     prior_value: \\n{self.prior_value}\\n\n",
        "                     prior_mil_rate: \\n{self.prior_mil_rate}\\n\n",
        "                     is_rate_variable: \\n{self.is_rate_variable}'''\n",
        "\n",
        "\n",
        "    def current_base_value(self):\n",
        "        \"\"\" return a Series of the current base value indexed by property class \"\"\"\n",
        "        return self.current_value - self.current_nmc_value\n",
        "\n",
        "    def prior_revenue(self):\n",
        "        \"\"\" return a Series of revenue of the prior year indexed by property class \"\"\"\n",
        "        return self.prior_value * self.prior_mil_rate / 1000\n",
        "\n",
        "    def prior_revenue_distribution(self):\n",
        "        \"\"\" return a Series of the revenue distribution of the prior year indexed by property class \"\"\"\n",
        "        return self.prior_revenue() / sum(self.prior_value)\n",
        "\n",
        "#roll = PropertyTaxRoll('Cleaned NMC Data Summary.xlsx',2023)\n",
        "#print(roll.current_value)\n",
        "\n",
        "def get_increase_as_series(is_variable, tax_increase):\n",
        "    \"\"\" return Series of the tax rate increase per sector (scalar increase to vector)\n",
        "    :param is_variable: Series of boolean indicating if rate is variable\n",
        "    :param tax_increase: percentage of tax rate increase\n",
        "    :return series of increases by sector\n",
        "    \"\"\"\n",
        "\n",
        "    return tax_increase * is_variable\n",
        "\n",
        "\n",
        "#increases = get_increase_as_series(is_rate_variable, 10.6)\n",
        "#print(f'increases:\\n{increases}')\n",
        "\n",
        "\n",
        "def calculate_new_rates(base_value, previous_revenue, increases):\n",
        "    \"\"\" returns the new rates for a given rate increases (Series)\n",
        "    :param base_value: base tax rate (Series)\n",
        "    :param previous_revenue: prior tax revenue (Series)\n",
        "    :param increases: tax increases by sector, with fixed sectors zeroed (Series)\n",
        "    :return series of new rates\n",
        "    \"\"\"\n",
        "    # calculate the new base revenue (increase is represented as percentage)\n",
        "    # by increasing the prior year's revenue (per sector) by the tax rate increase\n",
        "    base_revenue = (1+increases/100) * previous_revenue\n",
        "\n",
        "    # calculate the new rates required to achieve the base revenue\n",
        "    rates = 1000 * base_revenue / base_value\n",
        "\n",
        "    # fix the Port & Utilities rates\n",
        "    rates['Utilities'] = 40.0\n",
        "    rates['Port'] = 27.5\n",
        "    rates['Port Improvements'] = 22.5\n",
        "\n",
        "    return rates\n",
        "\n",
        "\n",
        "#new_rates = calculate_new_rates(current_base_value, prior_revenue, increases)\n",
        "#print(f'new_rates:\\n{new_rates}')\n",
        "\n",
        "\n",
        "def total_revenue(rates, value):\n",
        "    \"\"\" calculate the total revenue for a given rate and roll\n",
        "    :param rates: mil rate for each sector (Series)\n",
        "    :param value: net taxable value for each sector (Series)\n",
        "    :return: total revenue generated (Series)\n",
        "    \"\"\"\n",
        "    revenue = value * rates / 1000\n",
        "    return round(revenue.sum())\n",
        "\n",
        "\n",
        "#revenue = total_revenue(new_rates, current_value)\n",
        "#print(f'revenue:\\n{revenue}')\n",
        "\n",
        "#prior_revenue = prior_rate_df['mil rate']*prior_rate_df['Net Taxable Value']/1000\n",
        "#print(total_revenue(prior_revenue, roll_df, 10.59792))\n",
        "\n",
        "\n",
        "##############\n",
        "# bisection algorithm to find the % increase to base\n",
        "# that will give the total revenue required\n",
        "##############\n",
        "def find_increase(base_value, previous_revenue, values, required_revenue, variable):\n",
        "    \"\"\" returns the increase required (as a percent) to achieve the revenue required\n",
        "    :param base_value: base net taxable value (Series)\n",
        "    :param previous_revenue: prior year tax revenue (Series)\n",
        "    :param values: net taxable value (Series)\n",
        "    :param required_revenue: total required revenue for the tax year (int)\n",
        "    :param variable: boolean indicating if tax rate is variable\n",
        "    :return increase required (as a percent)\n",
        "    \"\"\"\n",
        "    delta = 10  # initialize to a number greater than one...\n",
        "    upper = 100\n",
        "    lower = 0\n",
        "    guess = (upper + lower) / 2\n",
        "\n",
        "    while abs(delta) > 1.0:\n",
        "        guess = (upper + lower) / 2\n",
        "        increases = get_increase_as_series(variable, guess)\n",
        "        new_rates = calculate_new_rates(base_value, previous_revenue, increases)\n",
        "        revenue = total_revenue(new_rates, values)\n",
        "        delta = revenue - required_revenue\n",
        "        if delta > 1:\n",
        "            upper = guess\n",
        "        elif delta < -1:\n",
        "            lower = guess\n",
        "\n",
        "    return guess\n",
        "\n",
        "\n",
        "\n",
        "#############################\n",
        "# Loop over 2014 to 2024 to\n",
        "# propagate the rates\n",
        "# over time.\n",
        "#############################\n",
        "\n",
        "\n",
        "# load the cleaned NMC excel file\n",
        "sheets = [str(year) for year in range(2015, 2025)]\n",
        "nmc_data = pd.read_excel('Cleaned NMC Data Summary.xlsx', index_col=0, sheet_name=sheets)\n",
        "\n",
        "\n",
        "\n",
        "# ARGGG!!!!\n",
        "#roll = PropertyTaxRoll('tax_input_data_2024.xlsx', 2024)\n",
        "roll = PropertyTaxRoll('Cleaned NMC Data Summary.xlsx',2024)\n",
        "#print(roll)\n",
        "revenue_required = 42250000\n",
        "\n",
        "increase = find_increase(roll.current_base_value(),\n",
        "                         roll.prior_revenue(),\n",
        "                         roll.current_value,\n",
        "                         revenue_required,\n",
        "                         roll.is_rate_variable)\n",
        "print(f'\\nincrease required is:\\n{increase}')\n",
        "\n",
        "increases = get_increase_as_series(roll.is_rate_variable,\n",
        "                                   increase)\n",
        "print(f'\\nincrease per sector is:\\n{increases}')\n",
        "\n",
        "new_rates = calculate_new_rates(roll.current_base_value(),\n",
        "                                roll.prior_revenue(),\n",
        "                                increases)\n",
        "print(f'\\nmil rates are:\\n{new_rates}')\n",
        "\n",
        "total_revenue = total_revenue(new_rates, roll.current_value)\n",
        "print(f'\\ntotal revenue:\\n{total_revenue}')\n",
        "\n",
        "### calculate tax burden\n",
        "revenue = new_rates * roll.current_value / 1000\n",
        "revenue_distribution = 100 * revenue / total_revenue\n",
        "print(f'\\nrevenue distribution:\\n{revenue_distribution.round(2)}')\n",
        "\n",
        "\n",
        "# plotting/visualization/export functions...\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XS2IBFUEJYBS",
        "outputId": "806426c9-2c55-46de-9eb1-260f2e1d32e0"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "reading 2024 data\n",
            "\n",
            "increase required is:\n",
            "10.37142276763916\n",
            "\n",
            "increase per sector is:\n",
            "Residential          10.371423\n",
            "Utilities             0.000000\n",
            "Port                  0.000000\n",
            "Port Improvements     0.000000\n",
            "Light Industry       10.371423\n",
            "Business             10.371423\n",
            "Forest               10.371423\n",
            "Recreation           10.371423\n",
            "Farm                 10.371423\n",
            "dtype: float64\n",
            "\n",
            "mil rates are:\n",
            "Residential           2.380899\n",
            "Utilities            40.000000\n",
            "Port                 27.500000\n",
            "Port Improvements    22.500000\n",
            "Light Industry        7.420747\n",
            "Business              5.521135\n",
            "Forest                5.862378\n",
            "Recreation            2.127305\n",
            "Farm                  2.344951\n",
            "dtype: float64\n",
            "\n",
            "total revenue:\n",
            "42250001\n",
            "\n",
            "revenue distribution:\n",
            "Residential          62.63\n",
            "Utilities             5.76\n",
            "Port                  1.46\n",
            "Port Improvements     0.23\n",
            "Light Industry        3.70\n",
            "Business             25.94\n",
            "Forest                0.09\n",
            "Recreation            0.18\n",
            "Farm                  0.00\n",
            "dtype: float64\n"
          ]
        }
      ]
    }
  ]
}